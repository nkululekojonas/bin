#!/usr/bin/env bash

# Backup script to copy files or create compressed archives
# Author: Nkululeko Jonas
# Date: 27-01-24

set -euo pipefail  # Enable strict error handling

usage() {
    echo "Usage:"
    echo "  backup [-t | --text] <source ...> <target>"
    echo "  -t, --text    Copy files with .bak extension instead of creating a compressed archive"
    exit 1
}

# Validate inputs
if [[ "$#" -lt 2 ]]; then
    usage
fi

# Parse options
TEXT_MODE=false
if [[ "$1" == "-t" || "$1" == "--text" ]]; then
    TEXT_MODE=true
    shift
fi

# Extract target directory (last argument)
BACKUP_DIR="${*: -1}"

# Extract source files (all but last argument)
SOURCE_FILES=("${@:1:$#-1}")

# Ensure backup directory exists
mkdir -p "$BACKUP_DIR"

# Verify that source files exist
for file in "${SOURCE_FILES[@]}"; do
    if [[ ! -e "$file" ]]; then
        echo "Error: Source file/directory not found: $file" >&2
        exit 1
    fi
done

backup_text() {
    for file in "${SOURCE_FILES[@]}"; do
        if [[ -f "$file" ]]; then
            cp "$file" "${BACKUP_DIR}/$(basename "$file").bak"
            echo "Backup successful: $file -> ${BACKUP_DIR}/$(basename "$file").bak"
        fi
    done
}

backup_files() {
    TIMESTAMP="$(date +%Y-%m-%d_%H-%M-%S)"
    BACKUP_FILE="${BACKUP_DIR}/backup_${TIMESTAMP}.tar.gz"
    tar -czf "$BACKUP_FILE" "${SOURCE_FILES[@]}" && echo "Backup successful: $BACKUP_FILE"
}

# Execute the appropriate backup function
if $TEXT_MODE; then
    backup_text
else
    backup_files
fi
